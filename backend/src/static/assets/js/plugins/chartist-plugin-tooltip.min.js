/* chartist-plugin-tooltip 0.0.18
 * Copyright Â© 2016 Markus Padourek
 * Free to use under the WTFPL license.
 * http://www.wtfpl.net/
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module
    define(['chartist'], function(Chartist) {
      return (root.returnExportsGlobal = factory(Chartist));
    });
  } else if (typeof exports === 'object') {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory(require('chartist'));
  } else {
    // Browser globals (root is window)
    root['Chartist.plugins.tooltips'] = factory(Chartist);
  }
}(this, function(Chartist) {
  /**
   * Chartist.js plugin to display a data label on top of the points in a line chart.
   *
   */
  /* global Chartist */
  (function(window, document, Chartist) {
    'use strict';

    var defaultOptions = {
      currency: undefined,
      currencyFormatCallback: undefined,
      tooltipOffset: {
        x: 0,
        y: -20
      },
      anchorToPoint: false,
      appendToBody: false,
      class: undefined,
      pointClass: 'ct-point-tooltip',
      tooltipFnc: undefined,
      tooltipTransitionDuration: 100,
      tooltipTransitionEasing: 'linear'
    };

    Chartist.plugins = Chartist.plugins || {};
    Chartist.plugins.tooltip = function(options) {
      options = Chartist.extend({}, defaultOptions, options);

      return function tooltip(chart) {
        var tooltipSelector = options.pointClass;
        if (chart instanceof Chartist.Bar) {
          tooltipSelector = 'ct-bar';
        } else if (chart instanceof Chartist.Pie) {
          // Added support for donut graph
          if (chart.options.donut) {
            tooltipSelector = 'ct-slice-donut';
          } else {
            tooltipSelector = 'ct-slice-pie';
          }
        }

        var $chart = chart.container;
        var $toolTip = $chart.querySelector('.chartist-tooltip');
        if (!$toolTip) {
          $toolTip = document.createElement('div');
          $toolTip.className = (!options.class) ? 'chartist-tooltip' : 'chartist-tooltip ' + options.class;
          if (!options.appendToBody) {
            $chart.appendChild($toolTip);
          } else {
            document.body.appendChild($toolTip);
          }
        }
        var height = $toolTip.offsetHeight;
        var width = $toolTip.offsetWidth;

        hide($toolTip);

        function on(event, selector, callback) {
          $chart.addEventListener(event, function(e) {
            if (!selector || hasClass(e.target, selector))
              callback(e);
          });
        }

        on('mouseover', tooltipSelector, function(event) {
          var $point = event.target;
          var tooltipText = '';

          var isPieChart = (chart instanceof Chartist.Pie) ? $point : $point.parentNode;
          var seriesName = (isPieChart) ? $point.parentNode.getAttribute('ct:meta') || $point.parentNode.getAttribute('ct:series-name') : '';
          var meta = $point.getAttribute('ct:meta') || seriesName || '';
          var hasMeta = !!meta;
          var value = $point.getAttribute('ct:value');

          if (options.tooltipFnc) {
            tooltipText = options.tooltipFnc(meta, value);
          } else {
            if (options.meta) {
              tooltipText += meta + '<br>';
            } else if (hasMeta) {
              tooltipText += meta + '<br>';
            }
            tooltipText += value;
            if (options.currency) {
              if (options.currencyFormatCallback != undefined) {
                tooltipText = options.currencyFormatCallback(tooltipText, options.currency);
              } else {
                tooltipText = options.currency + tooltipText;
              }
            }
          }

          $toolTip.innerHTML = tooltipText;
          setPosition(event);
          show($toolTip);

          // Remember height and width to avoid wrong position in IE
          height = $toolTip.offsetHeight;
          width = $toolTip.offsetWidth;
        });

        on('mouseout', tooltipSelector, function() {
          hide($toolTip);
        });

        on('mousemove', null, function(event) {
          if (options.anchorToPoint) return;
          setPosition(event);
        });

        function setPosition(event) {
          height = height || $toolTip.offsetHeight;
          width = width || $toolTip.offsetWidth;
          var offsetX = -width / 2 + options.tooltipOffset.x;
          var offsetY = -height + options.tooltipOffset.y;
          var anchorX, anchorY;

          if (!options.anchorToPoint) {
            anchorX = event.offsetX || event.layerX;
            anchorY = event.offsetY || event.layerY;
          } else {
            var box = event.target.getBoundingClientRect();
            var left = box.left + (box.width / 2);
            var top = box.top + box.height;

            anchorX = left - $chart.offsetLeft;
            anchorY = top - $chart.offsetTop;
          }

          $toolTip.style.top = (anchorY + offsetY) + 'px';
          $toolTip.style.left = (anchorX + offsetX) + 'px';
        }

        function show(element) {
          if (!hasClass(element, 'tooltip-show')) {
            element.className = element.className + ' tooltip-show';
          }
        }

        function hide(element) {
          var regex = new RegExp('tooltip-show' + '\\s*', 'gi');
          element.className = element.className.replace(regex, '').trim();
        }

        function hasClass(element, className) {
          return (' ' + element.getAttribute('class') + ' ').indexOf(' ' + className + ' ') > -1;
        }
      };
    };
  }(window, document, Chartist));

  return Chartist.plugins.tooltips;
}));
//# sourceMappingURL=chartist-plugin-tooltip.min.js.map 